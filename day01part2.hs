#!/usr/bin/env stack
{- stack
  script
  --resolver lts-9.0
-}
import Data.Char (digitToInt)

biginput :: String
biginput =


tests :: [(String, Int)]
tests =
  [("1212", 6), ("1221", 0), ("123425", 4), ("123123", 12), ("12131415", 4)]

digits :: [Char] -> [Int]
digits = fmap digitToInt

matchesHalfwayAround :: [Int] -> [Int]
matchesHalfwayAround [] = []
matchesHalfwayAround xs = mn xs offset []
  where
    offset = drop (length xs `div` 2) $ cycle xs
    mn :: [Int] -> [Int] -> [Int] -> [Int]
    mn [] _ res = res
    mn (x:xs) (y:ys) res =
      if x == y
        then mn xs ys (res ++ [x])
        else mn xs ys res

captcha :: [Char] -> Int
captcha xs = sum $ matchesHalfwayAround ds
  where
    ds = digits xs

runTest :: (String, Int) -> String
runTest (input, expected) =
  "'" ++ input ++ "'" ++ " returned " ++ show actual ++ " " ++ expText
  where
    actual = captcha input
    expText =
      if actual == expected
        then "as expected"
        else "FAIL!"

main :: IO ()
main = do
  print $ fmap runTest tests
  print $ captcha biginput
